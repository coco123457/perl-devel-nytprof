=head1 Ideas and Plans for Memory Profiling with NYTProf

XXX I<This mostly a dumping ground for thoughts, and links at the moment>.
Somewhere to gather the info so it'll be easier to find when someone
wants to work on it.

Generalize the concepts of clocks. Have a structure defining a 'clock' with
pointers to functions to get the time, subtract times to get ticks, return
the resolution etc. Give them names and attributes (cpu, realtime etc).
User could then pick a clock by name. By default we'd pick the best available
realtime clock (or best available cputime clock if usecputime=1 option set).

Conjectural terminology:

    "clock" means some measuring mechanism like get_clock(), times(), getrusage(),
    that may yield multiple pieces of information with a single call.

    "measure" is one specific item generated by a clock.

    Clock "time"=times(), measures: "time.user", "time.user+sys" etc
    Clock "clock"=clock_gettime(), measures: "clock.realtime", "clock.monotonic" etc
    Clock "rusage"=getrusage(), measures: "rusage.majflt", "rusage.nvcsw" etc
    Clock "memory" measures: "memory.bytes", "mem.allocs" etc
    Clock "arena" measures: "arena.svs", "arena.bytes" etc

Clocks need to be abstracted. Probably via a structure with function pointers
plus ways to copy clock output (struct) and get the difference between two
clock outputs.

Use the differencing logic where we currently handle times in the statement and
subroutine profilers.

=head1 Email threads

XXX find the various threads

XXX plus Nicholas's experimental patch

=head1 Possibly Relevant Perl Modules

Per-process memory information:

    http://search.cpan.org/perldoc?Devel::Mallinfo

Arena, stash, and pad based memory reporters:

    http://search.cpan.org/perldoc?Devel::Gladiator
    http://search.cpan.org/dist/Internals-DumpArenas/
    http://search.cpan.org/dist/Internals-GraphArenas/
    http://search.cpan.org/perldoc?Devel::DumpSizes
    http://search.cpan.org/perldoc?Devel::Arena

Per-object memory size reporters:

    http://search.cpan.org/perldoc?Devel::Size
    http://search.cpan.org/perldoc?Devel::Size::Report

Others:

    http://search.cpan.org/dist/Devel-Memalyzer/
    http://search.cpan.org/perldoc?Devel::Memalyzer::Plugin::ProcSmaps

=head1 Other Items of Interest

"Memory Efficient Perl" slides by jjore

    http://docs.google.com/present/view?id=dg7kgpct_24cjs3c9fv
    http://diotalevi.isa-geek.net/~josh/090402/frontend.png

memory visualization tools

    http://netjam.org/spoon/viz/

=cut
